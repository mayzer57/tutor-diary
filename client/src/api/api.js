const API_URL = 'http://localhost:5001/api';

// üîê –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const authHeader = () => {
  const token = localStorage.getItem('token');
  return {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${token}`,
  };
};

// üßØ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
export const safeJson = async (res) => {
  const contentType = res.headers.get('content-type');
  if (res.status === 204 || !contentType || !contentType.includes('application/json')) {
    return {};
  }
  try {
    const text = await res.text();
    return text ? JSON.parse(text) : {};
  } catch (err) {
    console.warn('[safeJson] JSON Parse error:', err.message);
    return {};
  }
};

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
export const register = async (name, email, password) => {
  const response = await fetch(`${API_URL}/tutors/register`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, email, password }),
  });

  if (!response.ok) {
    const errorData = await safeJson(response);
    const error = new Error(errorData.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    error.code = errorData.code || 'REGISTRATION_FAILED';
    throw error;
  }

  return await safeJson(response);
};

// ‚úÖ –í—Ö–æ–¥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
export const login = async (email, password) => {
  const response = await fetch(`${API_URL}/tutors/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password }),
  });

  const data = await safeJson(response);

  if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');

  localStorage.setItem('token', data.token);
  localStorage.setItem('userType', 'tutor');
  localStorage.setItem('user', JSON.stringify(data.user));
  return data;
};

// ‚úÖ –í—Ö–æ–¥ —É—á–µ–Ω–∏–∫–∞
export const loginStudent = async (login, password) => {
  const response = await fetch(`${API_URL}/students/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ login, password }),
  });

  const data = await safeJson(response);

  if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞');

  localStorage.setItem('token', data.token);
  localStorage.setItem('userType', 'student');
  localStorage.setItem('user', JSON.stringify(data.user));
  return data;
};

// üë§ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞
export const getStudentProfile = async () => {
  const res = await fetch(`${API_URL}/students/me`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞');
  return await safeJson(res);
};

// üë§ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
export const getStudents = async () => {
  const res = await fetch(`${API_URL}/students`, {
    headers: authHeader(),
  });

  if (res.status === 401) {
    localStorage.removeItem('token');
    window.location.href = '/auth';
    throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
  }

  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ–Ω–∏–∫–æ–≤');
  return await safeJson(res);
};

// üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞
export const addStudent = async (student) => {
  const res = await fetch(`${API_URL}/students`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify(student),
  });
  return await safeJson(res);
};

// üìÖ –£—Ä–æ–∫–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
export const getTutorLessons = async () => {
  const res = await fetch(`${API_URL}/lessons`, {
    headers: authHeader(),
  });

  const data = await safeJson(res);
  if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤');
  return data;
};

// üìÖ –£—Ä–æ–∫–∏ —É—á–µ–Ω–∏–∫–∞
export const getStudentLessons = async () => {
  const res = await fetch(`${API_URL}/lessons/student`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞');
  return await safeJson(res);
};

// üìÖ –£—Ä–æ–∫–∏ –ø–æ –Ω–µ–¥–µ–ª–µ
export const getLessonsByWeek = async (startDate, endDate) => {
  const res = await fetch(`${API_URL}/lessons?start=${startDate}&end=${endDate}`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤');
  return await safeJson(res);
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫
export const addLesson = async (lesson) => {
  const res = await fetch(`${API_URL}/lessons`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify(lesson),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
  return await safeJson(res);
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫
export const updateLesson = async (id, updates) => {
  const res = await fetch(`${API_URL}/lessons/${id}`, {
    method: 'PATCH',
    headers: authHeader(),
    body: JSON.stringify(updates),
  });
  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
  }
  return await safeJson(res);
};

// ‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫
export const deleteLesson = async (id) => {
  const res = await fetch(`${API_URL}/lessons/${id}`, {
    method: 'DELETE',
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
  return await safeJson(res);
};

// üß¨ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª–∏
export const cloneMultipleWeeks = async (fromDate, weeks = 4) => {
  const res = await fetch(`${API_URL}/lessons/clone-multiple`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ from: fromDate, weeks }),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
  return await safeJson(res);
};

// üìã –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã
export const getTemplates = async () => {
  const res = await fetch(`${API_URL}/lessons/templates`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤');
  return await safeJson(res);
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
export const addTemplate = async (template) => {
  const res = await fetch(`${API_URL}/lessons/templates`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify(template),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
  return await safeJson(res);
};

// ‚ùå –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
export const deleteTemplate = async (id) => {
  const res = await fetch(`${API_URL}/lessons/templates/${id}`, {
    method: 'DELETE',
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
  return await safeJson(res);
};

// üìÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
export const applyTemplateToWeek = async (startDate) => {
  const res = await fetch(`${API_URL}/lessons/apply-template`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ start: startDate }),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
  return await safeJson(res);
};

// ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—É—á–µ–Ω–∏–∫/—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä)
export const updateUserProfile = async (id, updates) => {
  const isTutor = localStorage.getItem('userType') === 'tutor';
  const endpoint = isTutor ? `/users/tutor/${id}` : `/users/${id}`;

  const res = await fetch(`${API_URL}${endpoint}`, {
    method: 'PATCH',
    headers: authHeader(),
    body: JSON.stringify(updates),
  });

  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
  }
  return await safeJson(res);
};

// üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
export const changePassword = async ({ userId, userType, newPassword }) => {
  const res = await fetch(`${API_URL}/auth/change-password`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ userId, userType, newPassword }),
  });

  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è');
  }

  return await safeJson(res);
};