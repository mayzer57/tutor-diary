export const API_URL = "https://mayzer57-tutor-diary-2e5c.twc1.net/api";



// üîê –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const authHeader = () => {
  const token = localStorage.getItem('token');
  return {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${token}`,
  };
};

// üßØ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
export const safeJson = async (res) => {
  const contentType = res.headers.get('content-type');
  if (res.status === 204 || !contentType || !contentType.includes('application/json')) {
    return {};
  }
  try {
    const text = await res.text();
    return text ? JSON.parse(text) : {};
  } catch (err) {
    console.warn('[safeJson] JSON Parse error:', err.message);
    return {};
  }
};

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
export const register = async (name, email, password) => {
  const response = await fetch(`${API_URL}/tutors/register`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, email, password }),
  });

  if (!response.ok) {
    const errorData = await safeJson(response);
    const error = new Error(errorData.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    error.code = errorData.code || 'REGISTRATION_FAILED';
    throw error;
  }

  return await safeJson(response);
};

// ‚úÖ –í—Ö–æ–¥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
export const login = async (email, password) => {
  const response = await fetch(`${API_URL}/tutors/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password }),
  });

  const data = await safeJson(response);

  if (!response.ok) {
    const error = new Error(data.error || data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    error.code = response.status;
    throw error;
  }

  localStorage.setItem('token', data.token);
  localStorage.setItem('userType', 'tutor');
  localStorage.setItem('user', JSON.stringify(data.user));
  return data;
};


// ‚úÖ –í—Ö–æ–¥ —É—á–µ–Ω–∏–∫–∞
export const loginStudent = async (login, password) => {
  const response = await fetch(`${API_URL}/students/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ login, password }),
  });

  const data = await safeJson(response);

  if (!response.ok) {
    const error = new Error(data.error || data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞');
    error.code = response.status;
    throw error;
  }

  localStorage.setItem('token', data.token);
  localStorage.setItem('userType', 'student');
  localStorage.setItem('user', JSON.stringify(data.user));
  return data;
};
export const deleteStudent = async (id) => {
  const res = await fetch(`${API_URL}/students/${id}`, {
    method: 'DELETE',
    headers: authHeader()
  });

  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞');
  }

  return await safeJson(res);
};

// üë§ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞
export const getStudentProfile = async () => {
  const res = await fetch(`${API_URL}/students/me`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞');
  return await safeJson(res);
};

// üë§ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
export const getStudents = async () => {
  const res = await fetch(`${API_URL}/students`, {
    headers: authHeader(),
  });

  if (res.status === 401) {
    localStorage.removeItem('token');
    window.location.href = '/auth';
    throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
  }

  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ–Ω–∏–∫–æ–≤');
  return await safeJson(res);
};

// üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞
export const addStudent = async (student) => {
  const res = await fetch(`${API_URL}/students`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({
      name: student.name,
      login: student.login,
      password: student.password,
      subjects: student.subjects, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    }),
  });

  const data = await safeJson(res);

  if (!res.ok) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:', data);
    const error = new Error(data?.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞');
    error.code = res.status;
    throw error;
  }

  return data;
};

// üìÖ –£—Ä–æ–∫–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
export const getTutorLessons = async () => {
  const res = await fetch(`${API_URL}/lessons`, {
    headers: authHeader(),
  });

  const data = await safeJson(res);
  if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤');
  return data;
};

// üìÖ –£—Ä–æ–∫–∏ —É—á–µ–Ω–∏–∫–∞
export const getStudentLessons = async () => {
  const res = await fetch(`${API_URL}/lessons/student`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞');
  return await safeJson(res);
};

// üìÖ –£—Ä–æ–∫–∏ –ø–æ –Ω–µ–¥–µ–ª–µ
export const getLessonsByWeek = async (startDate, endDate) => {
  const res = await fetch(`${API_URL}/lessons?start=${startDate}&end=${endDate}`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤');
  return await safeJson(res);
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫
export const addLesson = async (lesson) => {
  const res = await fetch(`${API_URL}/lessons`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify(lesson),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
  return await safeJson(res);
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫
export const updateLesson = async (id, updates) => {
  const res = await fetch(`${API_URL}/lessons/${id}`, {
    method: 'PATCH',
    headers: authHeader(),
    body: JSON.stringify(updates),
  });
  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
  }
  return await safeJson(res);
};

// ‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫
export const deleteLesson = async (id) => {
  const res = await fetch(`${API_URL}/lessons/${id}`, {
    method: 'DELETE',
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
  return await safeJson(res);
};

// üß¨ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª–∏
export const cloneMultipleWeeks = async (fromDate, weeks = 4) => {
  const res = await fetch(`${API_URL}/lessons/clone-multiple`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ from: fromDate, weeks }),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
  return await safeJson(res);
};

// üìã –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã
export const getTemplates = async () => {
  const res = await fetch(`${API_URL}/lessons/templates`, {
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤');
  return await safeJson(res);
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
export const addTemplate = async (template) => {
  const res = await fetch(`${API_URL}/lessons/templates`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify(template),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
  return await safeJson(res);
};

// ‚ùå –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
export const deleteTemplate = async (id) => {
  const res = await fetch(`${API_URL}/lessons/templates/${id}`, {
    method: 'DELETE',
    headers: authHeader(),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
  return await safeJson(res);
};

// üìÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
export const applyTemplateToWeek = async (startDate) => {
  const res = await fetch(`${API_URL}/lessons/apply-template`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ start: startDate }),
  });
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
  return await safeJson(res);
};

// ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—É—á–µ–Ω–∏–∫/—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä)
export const updateUserProfile = async (id, updates) => {
  const isTutor = localStorage.getItem('userType') === 'tutor';
  const endpoint = isTutor ? `/users/tutor/${id}` : `/users/${id}`;

  const res = await fetch(`${API_URL}${endpoint}`, {
    method: 'PATCH',
    headers: authHeader(),
    body: JSON.stringify(updates),
  });

  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
  }
  return await safeJson(res);
};

// üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
export const changePassword = async ({ userId, userType, newPassword }) => {
  const res = await fetch(`${API_URL}/auth/change-password`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ userId, userType, newPassword }),
  });

  if (!res.ok) {
    const error = await safeJson(res);
    throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è');
  }

  return await safeJson(res);
};
export const updateStudent = async (student) => {
  const res = await fetch(`${API_URL}/students/${student.id}`, {
    method: 'PATCH',
    headers: authHeader(),
    body: JSON.stringify({
      name: student.name,
      login: student.login,
      subjects: Array.isArray(student.subjects)
        ? student.subjects.map(s => typeof s === 'string' ? s : s.name)
        : [],
    }),
  });

  const data = await safeJson(res);
  if (!res.ok) {
    throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞');
  }

  return data;
};

// üìö –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞

// src/api/api.js
export async function getTutorGrades(
  period,
  offset = 0,
  limit = 50,
  filters = {},
  customRange = null
) {
  const now = new Date();
  let startDate = null;
  let endDate = now.toISOString().split('T')[0];

  if (customRange && customRange.start && customRange.end) {
    startDate = customRange.start;
    endDate = customRange.end;
  } else if (period !== 'all') {
    const daysMap = {
      '7': 7,
      '30': 30,
      '90': 90,
      '365': 365,
      '3 –º–µ—Å—è—Ü–∞': 90,
      '–ì–æ–¥': 365
    };

    let daysBack = daysMap[period];

    // üí° –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
    if (daysBack === undefined && !isNaN(Number(period))) {
      daysBack = Number(period);
    }

    if (typeof daysBack === 'number' && daysBack > 0) {
      const start = new Date(now.getTime() - daysBack * 24 * 60 * 60 * 1000);
      startDate = start.toISOString().split('T')[0];
    } else {
      console.warn('[getTutorGrades] ‚ùå Invalid period value:', period);
      startDate = null; // fallback
    }
  }

  console.log({ startDate, endDate });

  const params = new URLSearchParams({
    limit,
    offset,
    ...(startDate && { start: startDate, end: endDate }),
    ...(filters.student && { student: filters.student }),
    ...(filters.subject && { subject: filters.subject }),
  });

  const res = await fetch(`${API_URL}/lessons/grades?${params.toString()}`, {
    headers: authHeader(),
  });

  if (!res.ok) {
    const errText = await res.text();
    throw new Error(`[getTutorGrades] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: ${res.status} - ${errText}`);
  }

  return await res.json();
}
// üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∏
export async function updateLessonGrade(id, grade) {
  const res = await fetch(`${API_URL}/lessons/${id}/grade`, {
    method: 'PATCH',
    headers: {
      ...authHeader(),
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ grade: Number(grade) })
  });

  const data = await safeJson(res);
  if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏');
  return data;
}
export async function getMyGrades() {
  const res = await fetch(`${API_URL}/students/my-grades`, {
    headers: authHeader(),
  });
  return await safeJson(res);
}

export async function getStudentRanking() {
  const res = await fetch(`${API_URL}/students/ranking`, {
    headers: authHeader(),
  });
  return await safeJson(res);
}
// ‚úÖ –í api.js
export async function fetchStudentGrades() {
  const res = await fetch(`${API_URL}/students/my-grades`, {
    headers: authHeader()
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫: ${text}`);
  }

  return await res.json(); // [{ date, grade, subject }]
}
// üîî –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
// üîî –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
export async function getStudentNotifications(studentId) {
  const res = await fetch(`${API_URL}/notifications?student_id=${studentId}`, {
    headers: authHeader(),
  });

  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  return await res.json(); // [{ id, message, created_at }]
}



// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
export async function createNotification(studentId, message) {
  const res = await fetch(`${API_URL}/notifications`, {
    method: 'POST',
    headers: authHeader(),
    body: JSON.stringify({ student_id: studentId, message }),
  });

  const data = await safeJson(res);
  if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  return data;
}
// ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
// üìå –ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
export async function markNotificationAsRead(id) {
  const res = await fetch(`${API_URL}/notifications/${id}/read`, {
    method: 'PATCH',
    headers: authHeader(),
  });

  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  return await res.json();
}

// ‚ùå –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
export async function deleteNotification(id) {
  const res = await fetch(`${API_URL}/notifications/${id}`, {
    method: 'DELETE',
    headers: authHeader(),
  });

  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  return await res.json();
}

export async function getChatMessages(studentId, tutorId) {
  const res = await fetch(`${API_URL}/chat?student_id=${studentId}&tutor_id=${tutorId}`, {
    headers: authHeader(),
  });
  return await res.json();
}

export async function sendChatMessage(formData) {
  const res = await fetch(`${API_URL}/chat`, {
    method: 'POST',
    headers: {
      Authorization: authHeader().Authorization, // ‚ö†Ô∏è —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω, –±–µ–∑ Content-Type!
    },
    body: formData,
  });

  const data = await safeJson(res);
  if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
  return data;
}
export async function getChatListForTutor() {
  const res = await fetch(`${API_URL}/chat/chats`, {
    headers: authHeader(),
  });

  if (!res.ok) {
    const errText = await res.text();
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: ${errText}`);
  }

  return await res.json(); // [{ student_id, name, last_message_at }]
}
