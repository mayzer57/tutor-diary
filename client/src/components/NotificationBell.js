import { useEffect, useState } from 'react';
import './NotificationBell.css';
import { useNavigate } from 'react-router-dom';
import { API_URL, authHeader } from '../api/api';

function groupByDate(notifications) {
  const groups = {};
  for (const n of notifications) {
    const dateKey = new Date(n.created_at).toLocaleDateString('ru-RU');
    if (!groups[dateKey]) groups[dateKey] = [];
    groups[dateKey].push(n);
  }
  return groups;
}

function formatMessage(msg) {
  if (msg.includes('–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')) return 'üìö –ù–∞–∑–Ω–∞—á–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫.';
  if (msg.includes('–æ—Ü–µ–Ω–∫–∞')) return '‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.';
  if (msg.includes('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')) return '‚è∞ –£ –≤–∞—Å —Å–∫–æ—Ä–æ —É—Ä–æ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.';
  return msg;
}

function NotificationBell({ studentId }) {
  const [notifications, setNotifications] = useState([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (!studentId) return;
  
    fetch(`${API_URL}/notifications?student_id=${studentId}`, {
      headers: authHeader(),
    })
      .then(res => res.json())
      .then(data => {
        const sorted = [...data].reverse();
        setNotifications(sorted);
      })
      .catch((err) => {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err.message);
      });
  }, [studentId]);
  

  const handleClearAll = async () => {
    if (!studentId) return;
    try {
      await fetch(`/api/notifications/clear?student_id=${studentId}`, { method: 'DELETE' });
      setNotifications([]);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err.message);
    }
  };

  const handleNotificationClick = (notif) => {
    const text = notif.message.toLowerCase();
    if (text.includes('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ') || text.includes('—É—Ä–æ–∫')) {
      navigate('/student-schedule');
    } else if (text.includes('–æ—Ü–µ–Ω–∫–∞') || text.includes('–¥–æ–º–∞—à–Ω–µ–µ')) {
      navigate('/student-journal');
    }
    setShowDropdown(false);
  };

  const grouped = groupByDate(notifications);

  return (
    <div className="notification-bell">
      <button className="notif-btn" onClick={() => setShowDropdown(!showDropdown)}>
        üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({notifications.length})
      </button>

      {showDropdown && (
        <div className="notif-dropdown">
          <div className="notif-header">
            <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            <button className="clear-btn" onClick={handleClearAll}>üóë</button>
          </div>

          {notifications.length === 0 ? (
            <p>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
          ) : (
            Object.entries(grouped).map(([date, list]) => (
              <div key={date}>
                <p>{date === new Date().toLocaleDateString('ru-RU') ? '–°–µ–≥–æ–¥–Ω—è' : date}</p>
                <ul>
                  {list.map((n, idx) => (
                    <li
                      key={idx}
                      onClick={() => handleNotificationClick(n)}
                      className="unread"
                    >
                      <span>{formatMessage(n.message)}</span>
                      <small>{new Date(n.created_at).toLocaleTimeString('ru-RU')}</small>
                    </li>
                  ))}
                </ul>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
}

export default NotificationBell;
