// üìÅ server/routes/studentRoutes.js
const express = require('express');
const router = express.Router();
const pool = require('../db');
const { check, validationResult } = require('express-validator');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const auth = require('../middleware/authMiddleware');

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞)
router.get('/', auth, async (req, res) => {
  if (!req.tutor) {
    return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞' });
  }

  try {
    const result = await pool.query(`
      SELECT id, name, subject, login FROM students WHERE tutor_id = $1
    `, [req.tutor.id]);

    res.json(result.rows);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤' });
  }
});

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
router.post('/', auth, [
  check('name').notEmpty(),
  check('subject').notEmpty(),
  check('login').notEmpty(),
  check('password').isLength({ min: 6 })
], async (req, res) => {
  if (!req.tutor) return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { name, subject, login, password } = req.body;

  try {
    const existing = await pool.query('SELECT id FROM students WHERE login = $1', [login]);
    if (existing.rows.length > 0) return res.status(409).json({ error: '–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç' });

    const hashed = await bcrypt.hash(password, 10);
    const result = await pool.query(
      `INSERT INTO students (name, subject, login, password, tutor_id)
       VALUES ($1, $2, $3, $4, $5)
       RETURNING id, name, subject, login`,
      [name, subject, login, hashed, req.tutor.id]
    );

    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞' });
  }
});

// ‚úÖ –õ–æ–≥–∏–Ω —É—á–µ–Ω–∏–∫–∞
router.post('/login', async (req, res) => {
  const { login, password } = req.body;
  if (!login || !password) return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å' });

  try {
    const result = await pool.query('SELECT * FROM students WHERE login = $1', [login]);
    if (result.rows.length === 0) return res.status(404).json({ error: '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const student = result.rows[0];
    const isMatch = await bcrypt.compare(password, student.password);
    if (!isMatch) return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });

    const token = jwt.sign(
      { id: student.id, role: 'student' },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    const { password: _, ...data } = student;
    res.json({ token, user: data });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});

// ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞
router.get('/me', auth, async (req, res) => {
  if (!req.student) return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

  try {
    const result = await pool.query(`
      SELECT s.id, s.name, s.subject, s.login, t.name as tutor_name
      FROM students s
      JOIN tutors t ON s.tutor_id = t.id
      WHERE s.id = $1
    `, [req.student.id]);

    if (result.rows.length === 0)
      return res.status(404).json({ error: '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    res.json(result.rows[0]);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

module.exports = router;