const express = require('express');
const router = express.Router();
const pool = require('../db');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const { check, validationResult } = require('express-validator');

const auth = require('../middleware/authMiddleware');


router.post('/register', [
  check('name').notEmpty().withMessage('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  check('email').isEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  check('password').isLength({ min: 6 }).withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { name, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    const result = await pool.query(`
      INSERT INTO tutors (name, email, password)
      VALUES ($1, $2, $3)
      RETURNING id, name, email
    `, [name, email, hashedPassword]);

    const token = jwt.sign(
      { id: result.rows[0].id, role: 'tutor' },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.status(201).json({ token, userType: 'tutor' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// üîê –í—Ö–æ–¥
// üîê –í—Ö–æ–¥
router.post('/login', [
  check('email').isEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  check('password').notEmpty().withMessage('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { email, password } = req.body;

  try {
    console.log('[LOGIN] body:', req.body); // üëà –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥

    const result = await pool.query('SELECT * FROM tutors WHERE email = $1', [email]);
    if (result.rows.length === 0) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const tutor = result.rows[0];
    const match = await bcrypt.compare(password, tutor.password);
    if (!match) return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });

    const token = jwt.sign(
      { id: tutor.id, role: 'tutor' },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.json({ 
      token, 
      userType: 'tutor',
      user: { id: tutor.id, name: tutor.name, email: tutor.email }
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err); // üëà –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});



router.get('/profile', auth, async (req, res) => {
  try {
    const result = await pool.query('SELECT id, name, email FROM tutors WHERE id = $1', [req.tutor.id]);
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});


router.put('/profile', auth, [
  check('name').optional().notEmpty(),
  check('phone').optional().isMobilePhone(),
  check('subjects').optional().isArray()
], async (req, res) => {
  const { name } = req.body;
  try {
    const result = await pool.query(`
      UPDATE tutors SET name = $1 WHERE id = $2 RETURNING id, name, email
    `, [name, req.tutor.id]);

    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});


router.put('/change-password', auth, [
  check('currentPassword').notEmpty(),
  check('newPassword').isLength({ min: 6 })
], async (req, res) => {
  const { currentPassword, newPassword } = req.body;

  try {
    const result = await pool.query('SELECT * FROM tutors WHERE id = $1', [req.tutor.id]);
    const tutor = result.rows[0];

    const isMatch = await bcrypt.compare(currentPassword, tutor.password);
    if (!isMatch) return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });

    const newHashed = await bcrypt.hash(newPassword, 10);
    await pool.query('UPDATE tutors SET password = $1 WHERE id = $2', [newHashed, req.tutor.id]);

    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è' });
  }
});

module.exports = router;
